classdef centers < ros.Message
    %centers MATLAB implementation of robot_with_vision/centers
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_with_vision/centers' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1201854c80262892de9eef000575f7da' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        XCenters
        YCenters
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'XCenters', 'YCenters'} % List of non-constant message properties
        ROSPropertyList = {'header', 'x_centers', 'y_centers'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = centers(msg)
            %centers Construct the message object centers
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'centers', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function xcenters = get.XCenters(obj)
            %get.XCenters Get the value for property XCenters
            javaArray = obj.JavaMessage.getXCenters;
            array = obj.readJavaArray(javaArray, 'char');
            xcenters = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.XCenters(obj, xcenters)
            %set.XCenters Set the value for property XCenters
            if isstring(xcenters)
                xcenters = cellstr(xcenters);
            end
            
            if ~isvector(xcenters) && isempty(xcenters)
                % Allow empty [] input
                xcenters = cell.empty(0,1);
            end
            
            validateattributes(xcenters, {'cell', 'string'}, {'vector'}, 'centers', 'XCenters');
            if any(cellfun(@(x) ~ischar(x), xcenters))
                error(message('ros:mlros:message:CellArrayStringError', ...
                    'xcenters'));
            end
            
            javaArray = obj.JavaMessage.getXCenters;
            array = obj.writeJavaArray(xcenters, javaArray, 'char');
            obj.JavaMessage.setXCenters(array);
        end
        
        function ycenters = get.YCenters(obj)
            %get.YCenters Get the value for property YCenters
            javaArray = obj.JavaMessage.getYCenters;
            array = obj.readJavaArray(javaArray, 'char');
            ycenters = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.YCenters(obj, ycenters)
            %set.YCenters Set the value for property YCenters
            if isstring(ycenters)
                ycenters = cellstr(ycenters);
            end
            
            if ~isvector(ycenters) && isempty(ycenters)
                % Allow empty [] input
                ycenters = cell.empty(0,1);
            end
            
            validateattributes(ycenters, {'cell', 'string'}, {'vector'}, 'centers', 'YCenters');
            if any(cellfun(@(x) ~ischar(x), ycenters))
                error(message('ros:mlros:message:CellArrayStringError', ...
                    'ycenters'));
            end
            
            javaArray = obj.JavaMessage.getYCenters;
            array = obj.writeJavaArray(ycenters, javaArray, 'char');
            obj.JavaMessage.setYCenters(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.XCenters = obj.XCenters;
            cpObj.YCenters = obj.YCenters;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.XCenters = strObj.XCenters;
            obj.YCenters = strObj.YCenters;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.XCenters = obj.XCenters;
            strObj.YCenters = obj.YCenters;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.robot_with_vision.centers.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.robot_with_vision.centers;
            obj.reload(strObj);
        end
    end
end
